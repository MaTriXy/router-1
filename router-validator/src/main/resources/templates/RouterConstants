package $packageName;

import java.util.Locale;
import ${data.resourcePackageName}.R;

import com.eyeem.router.Router;

<% if (data.configFor?.trim()) { %>
import ${data.configFor};
import java.lang.reflect.Method;
import java.util.HashMap;
<% } %>

public final class $className {

<% data.nodes.each { node -> %>

    // region ${node.type}

    ${node.path()}
    public static final String TYPE_${node.type.toUpperCase()} = "${node.type}";

    <% if (classesCheck) { %>

      <% if (node.decorators.size()) { %>
      public static final Class[] DECORATORS_${node.type.toUpperCase()} = { ${node.decorators()} };
      <% } %>
      <% if (node.holders.size()) { %>
      public static final Class[] HOLDERS_${node.type.toUpperCase()} = { ${node.holders()} };
      <% } %>
      <% if (node.resources.size()) { %>
      public static final int[] RESOURCES_${node.type.toUpperCase()} = { ${node.resources()} };
      <% } %>
      <% if (node.otherClasses.size()) { %>
      public static final Class[] OTHER_CLASSES_${node.type.toUpperCase()} = { ${node.otherClasses()} };
      <% } %>

    <% } %>
    // endregion

<% } %>

<% if (data.configFor?.trim()) { %>
   <% data.configDecorators.eachWithIndex { decorator, index -> %>
   private final static int ${decorator.variableName} = ${index};
   <% } %>

   public static boolean configFor(Class decoratorClass, Router.RouteContext context, Object config, ${data.configFor} output) {
      if (!mappings.containsKey(decoratorClass)) {
         return dynamicConfigFor(decoratorClass, context, config, output);
      }

      switch (mappings.get(decoratorClass)) {
         <% data.configDecorators.eachWithIndex { decorator, index -> %>
         case ${decorator.variableName}: return ${decorator.className}.configFor(context, config, output);
         <% } %>
      }

      return false;
   }

   private static boolean dynamicConfigFor(Class decoratorClass, Router.RouteContext context, Object config, ${data.configFor} output) {
      try {
         java.lang.reflect.Method configFor = methods.get(decoratorClass);
         if (configFor == null) {
            configFor = decoratorClass.getMethod("configFor", Router.RouteContext.class, Object.class, ${data.configFor}.class);
            methods.put(decoratorClass, configFor);
         }
         return (Boolean)configFor.invoke(null, context, config, output);
      } catch (Throwable e) {
         return true;
      }
   }

   private final static HashMap<Class, Integer> mappings;
   private final static HashMap<Class, Method> methods;
   static {
      mappings = new HashMap<>();
      <% data.configDecorators.eachWithIndex { decorator, index -> %>
      mappings.put(${decorator.className}.class, ${decorator.variableName});
      <% } %>
      methods = new HashMap<>();
   }
<% } %>

}